name: Pull-Request Auto-Deploy

on:
  push:
    branches:
      - "auto-*"

permissions:
  contents: write
  pull-requests: write

env:
  MERGE_METHOD: merge   # or: squash | rebase

jobs:
  auto-pr-merge:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Ensure modern gh so --json/--auto works
      - name: Install latest GitHub CLI
        run: |
          set -euo pipefail
          sudo apt-get remove -y gh || true
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | \
            sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | \
            sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y gh jq
          gh --version

      - name: Derive branch name
        id: ctx
        run: echo "branch=$GITHUB_REF_NAME" >> "$GITHUB_OUTPUT"

      # Create or reuse PR (author = github-actions[bot])
      - name: Create or reuse PR → main
        id: pr
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          branch="${{ steps.ctx.outputs.branch }}"
          existing=$(gh pr list --head "$branch" --base main --state open --json number,url,author --jq '.[0]' || true)
          if [[ -n "$existing" ]]; then
            echo "$existing" | jq .
            echo "number=$(echo "$existing" | jq -r .number)" >> "$GITHUB_OUTPUT"
          else
            created=$(gh pr create \
              --title "[AUTO] PR from $branch to main" \
              --body  "Auto-generated from \`$branch\` to \`main\`." \
              --base main --head "$branch" \
              --json number,url,author)
            echo "$created" | jq .
            echo "number=$(echo "$created" | jq -r .number)" >> "$GITHUB_OUTPUT"
          fi

      # Guard: approver must differ from author
      - name: Guard identities (approver ≠ author)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BOT_PAT: ${{ secrets.BOT_PAT }}
        run: |
          set -euo pipefail
          pr=${{ steps.pr.outputs.number }}
          author=$(gh api repos/${{ github.repository }}/pulls/$pr --jq .user.login)
          approver=$(GH_TOKEN=$BOT_PAT gh api user --jq .login)
          echo "PR author : $author"
          echo "Approver  : $approver"
          if [ "$author" = "$approver" ]; then
            echo "::error::Approver and author are the same ($author). Use a different account/token for BOT_PAT."
            exit 1
          fi

      # Approve to satisfy review requirement
      - name: Approve PR
        env:
          GH_TOKEN: ${{ secrets.BOT_PAT }}
        run: gh pr review ${{ steps.pr.outputs.number }} --approve

      # Enable auto-merge -> GitHub will MERGE ONLY AFTER required checks pass
      - name: Enable Auto-merge (waits for checks)
        env:
          GH_TOKEN: ${{ secrets.BOT_PAT }}
        run: gh pr merge ${{ steps.pr.outputs.number }} --auto --${{ env.MERGE_METHOD }} --delete-branch

      - name: Done
        run: echo "✅ PR is set to auto-merge once checks are green."
