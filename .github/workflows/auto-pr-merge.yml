name: Pull-Request Auto-Deploy

on:
  push:
    branches:
      - "auto-*"

permissions:
  contents: write
  pull-requests: write

jobs:
  auto-pr-merge:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # ---------- Upgrade GitHub CLI ----------
      - name: Install latest GitHub CLI
        run: |
          set -euo pipefail
          sudo apt-get remove -y gh || true
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | \
            sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] \
          https://cli.github.com/packages stable main" | \
          sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install -y gh jq
          gh version

      - name: Derive branch name
        id: ctx
        run: echo "branch=$GITHUB_REF_NAME" >> "$GITHUB_OUTPUT"

      - name: Create or reuse PR → main
        id: pr
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          branch="${{ steps.ctx.outputs.branch }}"

          # Look for existing PR
          existing=$(gh pr list --head "$branch" --base main --state open --json number,author,url --jq '.[0]' || true)

          if [[ -n "$existing" ]]; then
            pr_number=$(echo "$existing" | jq -r .number)
            pr_url=$(echo "$existing" | jq -r .url)
            pr_author=$(echo "$existing" | jq -r .author.login)
            echo "Found existing PR #$pr_number by $pr_author ($pr_url)"
            if [[ "$pr_author" != "github-actions[bot]" ]]; then
              echo "Closing PR #$pr_number to recreate as github-actions[bot]…"
              gh pr close "$pr_number" -c "Recreating as github-actions[bot] for auto-approval"
              existing=""
            fi
          fi

          if [[ -z "$existing" ]]; then
            pr_json=$(gh pr create \
              --title "[AUTO] PR from $branch to main" \
              --body  "Auto-generated from \`$branch\` to \`main\`." \
              --base main --head "$branch" \
              --json number,url,author)
            pr_number=$(echo "$pr_json" | jq -r .number)
            pr_url=$(echo "$pr_json" | jq -r .url)
            pr_author=$(echo "$pr_json" | jq -r .author.login)
            echo "Created PR #$pr_number by $pr_author ($pr_url)"
          fi

          echo "number=$pr_number" >> "$GITHUB_OUTPUT"

      - name: Guard identities (approver ≠ author)
        env:
          BOT_PAT: ${{ secrets.BOT_PAT }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          pr=${{ steps.pr.outputs.number }}
          author=$(gh api repos/${{ github.repository }}/pulls/$pr --jq .user.login)
          approver=$(GH_TOKEN=$BOT_PAT gh api user --jq .login)
          echo "PR author : $author"
          echo "Approver  : $approver"
          if [ "$author" = "$approver" ]; then
            echo "::error::Approver and author are the same ($author). Use a different account/token for BOT_PAT."
            exit 1
          fi

      - name: Approve PR
        env:
          GH_TOKEN: ${{ secrets.BOT_PAT }}
        run: gh pr review ${{ steps.pr.outputs.number }} --approve

      - name: Enable Auto-merge
        env:
          GH_TOKEN: ${{ secrets.BOT_PAT }}
        run: |
          set -euo pipefail
          gh pr merge ${{ steps.pr.outputs.number }} --auto --merge --delete-branch
          echo "Auto-merge enabled for PR #${{ steps.pr.outputs.number }}"
