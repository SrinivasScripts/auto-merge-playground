name: Auto PR + Approve + Enable Auto-merge

on:
  push:
    branches: [ "auto-*" ]

permissions:
  contents: write
  pull-requests: write

jobs:
  auto_pr_and_merge:
    runs-on: ubuntu-latest
    steps:
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Set branch name
        run: echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV

      # 1) Create or reuse PR (author = github-actions[bot])
      - name: Create or reuse PR
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          CREATE=$(curl -s -w "\n%{http_code}\n" -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/pulls" \
            -d "{\"title\":\"[AUTO] $BRANCH_NAME → main\",\"head\":\"$BRANCH_NAME\",\"base\":\"main\",\"body\":\"Auto-generated from '$BRANCH_NAME' to main.\"}")

          BODY=$(echo "$CREATE" | sed '$d'); CODE=$(echo "$CREATE" | tail -n1)
          if [ "$CODE" = "201" ]; then
            PR_NUMBER=$(echo "$BODY" | jq -r .number)
          else
            # Reuse existing open PR for this branch
            PR_NUMBER=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/${{ github.repository }}/pulls?state=open&head=${{ github.repository_owner }}:$BRANCH_NAME&base=main" \
              | jq -r '.[0].number')
            [ -z "$PR_NUMBER" ] || [ "$PR_NUMBER" = "null" ] && { echo "::error::Failed to create/find PR. HTTP $CODE: $BODY"; exit 1; }
          fi
          echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV
          echo "✅ PR #$PR_NUMBER ready"

      # 2) Get PR author & GraphQL node_id
      - name: Fetch PR details
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          PR_JSON=$(curl -s -H "Authorization: token $GITHUB_TOKEN" -H "Accept: application/vnd.github+json" \
                    "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER")
          AUTHOR=$(echo "$PR_JSON" | jq -r .user.login)
          PR_NODE_ID=$(echo "$PR_JSON" | jq -r .node_id)
          echo "PR_AUTHOR=$AUTHOR"   >> $GITHUB_ENV
          echo "PR_NODE_ID=$PR_NODE_ID" >> $GITHUB_ENV
          echo "PR author : $AUTHOR"

      # 3) Guard: approver must differ from author
      - name: Guard identities (approver ≠ author)
        env:
          BOT_PAT: ${{ secrets.BOT_PAT }}
        run: |
          set -euo pipefail
          APPROVER=$(curl -s -H "Authorization: token $BOT_PAT" https://api.github.com/user | jq -r .login)
          echo "Approver : $APPROVER"
          if [ "$APPROVER" = "${PR_AUTHOR}" ]; then
            echo "::error::Approver and author are the same ($APPROVER). Create PR with GITHUB_TOKEN or use a different BOT_PAT user."
            exit 1
          fi

      # 4) Approve (satisfy the "1 review required")
      - name: Approve PR
        env:
          BOT_PAT: ${{ secrets.BOT_PAT }}
        run: |
          set -euo pipefail
          RESP=$(curl -s -w "\n%{http_code}\n" -X POST \
            -H "Authorization: token $BOT_PAT" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER/reviews" \
            -d '{"event":"APPROVE","body":"Auto-approval by bot"}')
          BODY=$(echo "$RESP" | sed '$d'); CODE=$(echo "$RESP" | tail -n1)
          if [ "$CODE" -lt 200 ] || [ "$CODE" -gt 299 ]; then
            echo "$BODY"
            echo "::error::Approval failed (HTTP $CODE). Does BOT_PAT have pull_requests:write and repo write access? Is approver different from author?"
            exit 1
          fi
          echo "✅ Approved PR #$PR_NUMBER"

      # 5) Enable auto-merge via GraphQL (merges when all required checks pass)
      - name: Enable Auto-merge (MERGE)
        env:
          BOT_PAT: ${{ secrets.BOT_PAT }}
        run: |
          set -euo pipefail
          read -r -d '' QUERY << 'EOF'
          mutation($prid:ID!, $method:PullRequestMergeMethod!) {
            enablePullRequestAutoMerge(input:{pullRequestId:$prid, mergeMethod:$method}) {
              pullRequest { number, autoMergeRequest { enabledAt, mergeMethod } }
            }
          }
          EOF
          VARS=$(jq -n --arg prid "$PR_NODE_ID" --arg method "MERGE" '{prid:$prid, method:$method}')
          RESP=$(curl -s -X POST https://api.github.com/graphql \
            -H "Authorization: bearer $BOT_PAT" \
            -H "Content-Type: application/json" \
            -d "$(jq -n --arg q "$QUERY" --argjson v "$VARS" '{query:$q, variables:$v}')")

          # Check for GraphQL errors
          ERR=$(echo "$RESP" | jq '.errors')
          if [ "$ERR" != "null" ]; then
            echo "$RESP"
            echo "::error::Failed to enable auto-merge (GraphQL)."
            exit 1
          fi
          echo "✅ Auto-merge enabled for PR #$PR_NUMBER (MERGE). It will merge when checks pass."

      - name: Finish
        run: echo "Done."
